generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Profile {
  id       String @id @default(uuid())
  userId   String @unique
  imageUrl String @db.Text
  email    String
  name     String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  servers   Server[]
  members   Member[]
  channels  Channel[]
  friendOne Friend[]  @relation("friendOne")
  friendTwo Friend[]  @relation("friendTwo")

  // conversationFriendOne ConversationForFriends[] @relation("conversationFriendOne")
  // conversationFriendTwo ConversationForFriends[] @relation("conversationFriendTwo")
}

model Server {
  id             String @id @default(uuid())
  name           String @unique
  imageUrl       String @db.Text
  invitationCode String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  members  Member[]
  channels Channel[]

  @@index([profileId])
}

enum MemberType {
  GUEST
  ADMIN
  MODERATOR
}

model Member {
  id   String     @id @default(uuid())
  role MemberType @default(GUEST)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages       Message[]
  directMessages DirectMessage[]

  conversationInitiated Conversation[] @relation("memberOne")
  conversationReceive   Conversation[] @relation("memberTwo")

  @@index([profileId])
  @@index([serverId])
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id   String      @id @default(uuid())
  name String      @unique
  type ChannelType @default(TEXT)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages Message[]

  @@index([profileId])
  @@index([serverId])
}

model Message {
  id      String @id @default(uuid())
  content String @db.Text

  fileUrl String? @db.Text

  memberId String
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  channelId String
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  deleted Boolean? @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([channelId])
  @@index([memberId])
}

model Conversation {
  id String @id @default(uuid())

  memberOneId String
  memberOne   Member @relation("memberOne", fields: [memberOneId], references: [id], onDelete: Cascade)

  memberTwoId String
  memberTwo   Member @relation("memberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)

  directMessages DirectMessage[]

  @@unique([memberOneId, memberTwoId])
  @@index([memberOneId])
  @@index([memberTwoId])
}

// model ConversationForFriends {
//   id String @id @default(uuid())

//   conversationFriendOneId String
//   conversationFriendOne   Profile @relation("conversationFriendOne", fields: [conversationFriendOneId], references: [id], onDelete: Cascade)

//   conversationFriendTwoId String
//   conversationFriendTwo   Profile @relation("conversationFriendTwo", fields: [conversationFriendTwoId], references: [id], onDelete: Cascade)

//   directMessages DirectMessage[]

//   @@unique([conversationFriendOneId, conversationFriendTwoId])
//   @@index([conversationFriendOneId])
//   @@index([conversationFriendTwoId])
// }

model DirectMessage {
  id      String @id @default(uuid())
  content String @db.Text

  fileUrl String? @db.Text

  memberId String
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  conversationId String?
  conversation   Conversation? @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  deleted Boolean? @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // ConversationForFriends   ConversationForFriends? @relation(fields: [conversationForFriendsId], references: [id])
  conversationForFriendsId String?

  @@index([memberId])
  @@index([conversationId])
}

enum FriendStatus {
  REQUESTABLE
  PENDING
  FRIENDED
}

model Friend {
  id String @id @default(uuid())

  friendOneId String
  friendOne   Profile @relation("friendOne", fields: [friendOneId], references: [id], onDelete: Cascade)

  friendTwoId String
  friendTwo   Profile @relation("friendTwo", fields: [friendTwoId], references: [id], onDelete: Cascade)

  status FriendStatus @default(REQUESTABLE)

  @@unique([friendOneId, friendTwoId])
  @@index([friendOneId])
  @@index([friendTwoId])
}
